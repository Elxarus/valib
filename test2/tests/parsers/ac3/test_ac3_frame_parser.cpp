/*
  AC3FrameParser test
*/

#include <boost/test/unit_test.hpp>
#include "parsers/ac3/ac3_header.h"

static const uint8_t good[][8] =
{                                                     // fscod frmsizcod   bsid   bsmod acmod  lfeon
  { 0x0b, 0x77, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00 }, //  00    00 0000   0100 0   000   000   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x41, 0x49, 0x20, 0x00 }, //  01    00 0001   0100 1   001   001   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x82, 0x52, 0x40, 0x00 }, //  10    00 0010   0101 0   010   010   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x03, 0x5b, 0x60, 0x00 }, //  00    00 0011   0101 1   011   011   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x44, 0x40, 0x80, 0x00 }, //  01    00 0100   0100 0   000   100   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x85, 0x41, 0xa0, 0x00 }, //  10    00 0101   0100 0   001   101   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x08, 0x4a, 0xc0, 0x00 }, //  00    00 1000   0100 1   010   110   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x49, 0x53, 0xe0, 0x00 }, //  01    00 1001   0101 0   011   111   0 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x90, 0x58, 0x10, 0x00 }, //  10    01 0000   0101 1   000   000   1 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x11, 0x41, 0x30, 0x00 }, //  00    01 0001   0100 0   001   001   1 0000
  { 0x0b, 0x77, 0x00, 0x00, 0x60, 0x42, 0x44, 0x00 }, //  01    10 0000   0100 0   010   010   0 0100
  { 0x0b, 0x77, 0x00, 0x00, 0xa1, 0x4b, 0x64, 0x00 }, //  10    10 0001   0100 1   011   011   0 0100
  { 0x0b, 0x77, 0x00, 0x00, 0x22, 0x50, 0x84, 0x00 }, //  00    10 0010   0101 0   000   100   0 0100
  { 0x0b, 0x77, 0x00, 0x00, 0x63, 0x59, 0xa1, 0x00 }, //  01    10 0011   0101 1   001   101   0 0001
  { 0x0b, 0x77, 0x00, 0x00, 0xa4, 0x42, 0xc4, 0x00 }, //  10    10 0100   0100 0   010   110   0 0100
  { 0x0b, 0x77, 0x00, 0x00, 0x25, 0x43, 0xe1, 0x00 }, //  00    10 0101   0100 0   011   111   0 0001

  { 0x77, 0x0b, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00 }, //  00    00 0000   0100 0   000   000   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x49, 0x41, 0x00, 0x20 }, //  01    00 0001   0100 1   001   001   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0x82, 0x00, 0x40 }, //  10    00 0010   0101 0   010   010   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x5b, 0x03, 0x00, 0x60 }, //  00    00 0011   0101 1   011   011   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x40, 0x44, 0x00, 0x80 }, //  01    00 0100   0100 0   000   100   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x41, 0x85, 0x00, 0xa0 }, //  10    00 0101   0100 0   001   101   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x4a, 0x08, 0x00, 0xc0 }, //  00    00 1000   0100 1   010   110   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x53, 0x49, 0x00, 0xe0 }, //  01    00 1001   0101 0   011   111   0 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x58, 0x90, 0x00, 0x10 }, //  10    01 0000   0101 1   000   000   1 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x41, 0x11, 0x00, 0x30 }, //  00    01 0001   0100 0   001   001   1 0000
  { 0x77, 0x0b, 0x00, 0x00, 0x42, 0x60, 0x00, 0x44 }, //  01    10 0000   0100 0   010   010   0 0100
  { 0x77, 0x0b, 0x00, 0x00, 0x4b, 0xa1, 0x00, 0x64 }, //  10    10 0001   0100 1   011   011   0 0100
  { 0x77, 0x0b, 0x00, 0x00, 0x50, 0x22, 0x00, 0x84 }, //  00    10 0010   0101 0   000   100   0 0100
  { 0x77, 0x0b, 0x00, 0x00, 0x59, 0x63, 0x00, 0xa1 }, //  01    10 0011   0101 1   001   101   0 0001
  { 0x77, 0x0b, 0x00, 0x00, 0x42, 0xa4, 0x00, 0xc4 }, //  10    10 0100   0100 0   010   110   0 0100
  { 0x77, 0x0b, 0x00, 0x00, 0x43, 0x25, 0x00, 0xe1 }, //  00    10 0101   0100 0   011   111   0 0001
};

static const Speakers good_spk[] =
{
  Speakers(FORMAT_AC3, MODE_2_0, 48000),
  Speakers(FORMAT_AC3, MODE_1_0, 22050),
  Speakers(FORMAT_AC3, MODE_2_0,  8000),
  Speakers(FORMAT_AC3, MODE_3_0,  6000),
  Speakers(FORMAT_AC3, MODE_2_1, 44100),
  Speakers(FORMAT_AC3, MODE_3_1, 32000),
  Speakers(FORMAT_AC3, MODE_2_2, 24000),
  Speakers(FORMAT_AC3, MODE_3_2, 11025),
  Speakers(FORMAT_AC3, MODE_2_0 | CH_MASK_LFE,  4000),
  Speakers(FORMAT_AC3, MODE_1_0 | CH_MASK_LFE, 48000),
  Speakers(FORMAT_AC3, MODE_2_0 | CH_MASK_LFE, 44100),
  Speakers(FORMAT_AC3, MODE_3_0 | CH_MASK_LFE, 16000),
  Speakers(FORMAT_AC3, MODE_2_1 | CH_MASK_LFE, 12000),
  Speakers(FORMAT_AC3, MODE_3_1 | CH_MASK_LFE,  5512),
  Speakers(FORMAT_AC3, MODE_2_2 | CH_MASK_LFE, 32000),
  Speakers(FORMAT_AC3, MODE_3_2 | CH_MASK_LFE, 48000),

  Speakers(FORMAT_AC3, MODE_2_0, 48000),
  Speakers(FORMAT_AC3, MODE_1_0, 22050),
  Speakers(FORMAT_AC3, MODE_2_0,  8000),
  Speakers(FORMAT_AC3, MODE_3_0,  6000),
  Speakers(FORMAT_AC3, MODE_2_1, 44100),
  Speakers(FORMAT_AC3, MODE_3_1, 32000),
  Speakers(FORMAT_AC3, MODE_2_2, 24000),
  Speakers(FORMAT_AC3, MODE_3_2, 11025),
  Speakers(FORMAT_AC3, MODE_2_0 | CH_MASK_LFE,  4000),
  Speakers(FORMAT_AC3, MODE_1_0 | CH_MASK_LFE, 48000),
  Speakers(FORMAT_AC3, MODE_2_0 | CH_MASK_LFE, 44100),
  Speakers(FORMAT_AC3, MODE_3_0 | CH_MASK_LFE, 16000),
  Speakers(FORMAT_AC3, MODE_2_1 | CH_MASK_LFE, 12000),
  Speakers(FORMAT_AC3, MODE_3_1 | CH_MASK_LFE,  5512),
  Speakers(FORMAT_AC3, MODE_2_2 | CH_MASK_LFE, 32000),
  Speakers(FORMAT_AC3, MODE_3_2 | CH_MASK_LFE, 48000),
};

static const uint8_t bad[][8] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // null header

  { 0x0b, 0x77, 0x00, 0x00, 0xc2, 0x52, 0x40, 0x00 }, // bad fscod
  { 0x0b, 0x77, 0x00, 0x00, 0xa6, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0xa7, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0xa8, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0xb0, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0xbe, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0xbf, 0x52, 0x40, 0x00 }, // bad frmsizcod
  { 0x0b, 0x77, 0x00, 0x00, 0x82, 0x62, 0x40, 0x00 }, // bad bsid
  { 0x0b, 0x77, 0x00, 0x00, 0x82, 0x6a, 0x40, 0x00 }, // bad bsid
  { 0x0b, 0x77, 0x00, 0x00, 0x82, 0x72, 0x40, 0x00 }, // bad bsid
  { 0x0b, 0x77, 0x00, 0x00, 0x82, 0x7a, 0x40, 0x00 }, // bad bsid

  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xc2, 0x00, 0x40 }, // bad fscod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xa6, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xa7, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xa8, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xb0, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xbe, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x52, 0xbf, 0x00, 0x40 }, // bad frmsizcod
  { 0x77, 0x0b, 0x00, 0x00, 0x62, 0x82, 0x00, 0x40 }, // bad bsid
  { 0x77, 0x0b, 0x00, 0x00, 0x6a, 0x82, 0x00, 0x40 }, // bad bsid
  { 0x77, 0x0b, 0x00, 0x00, 0x72, 0x82, 0x00, 0x40 }, // bad bsid
  { 0x77, 0x0b, 0x00, 0x00, 0x7a, 0x82, 0x00, 0x40 }, // bad bsid
};

BOOST_AUTO_TEST_SUITE(ac3_frame_parser)

BOOST_AUTO_TEST_CASE(can_parse)
{
  AC3FrameParser parser;
  BOOST_CHECK(parser.can_parse(FORMAT_AC3));
}

BOOST_AUTO_TEST_CASE(sync_info)
{
  SyncInfo sinfo = AC3FrameParser().sync_info();

  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK(sinfo.sync_trie.is_sync(good[i]));

//  for (int i = 0; i < array_size(bad); i++)
//    BOOST_CHECK(!sinfo.sync_trie.is_sync(bad[i]));
}

BOOST_AUTO_TEST_CASE(parse_header)
{
  FrameInfo finfo;
  AC3FrameParser parser;

  for (int i = 0; i < array_size(good); i++)
  {
    BOOST_CHECK_MESSAGE(parser.parse_header(good[i], &finfo), "good header N" << i);
    BOOST_CHECK(good_spk[i] == finfo.spk);
  }

  for (int i = 0; i < array_size(bad); i++)
    BOOST_CHECK_MESSAGE(!parser.parse_header(bad[i]), "bad header N" << i);
}

BOOST_AUTO_TEST_CASE(compare_headers)
{
  AC3FrameParser parser;

  // Compare equal good headers
  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK(parser.compare_headers(good[i], good[i]));

  // Compare different good headers
  for (int i = 0; i < array_size(good); i++)
    for (int j = i+1; j < array_size(good); j++)
    {
      BOOST_CHECK(!parser.compare_headers(good[i], good[j]));
      BOOST_CHECK(!parser.compare_headers(good[j], good[i]));
    }

  // Compare good with bad
  for (int i = 0; i < array_size(good); i++)
    for (int j = 0; j < array_size(bad); j++)
    {
      BOOST_CHECK(!parser.compare_headers(good[i], bad[j]));
      BOOST_CHECK(!parser.compare_headers(bad[j], good[i]));
    }

  // Compare bad headers
  for (int i = 0; i < array_size(bad); i++)
    for (int j = 0; j < array_size(bad); j++)
      BOOST_CHECK(!parser.compare_headers(bad[i], bad[j]));
}

BOOST_AUTO_TEST_SUITE_END()
