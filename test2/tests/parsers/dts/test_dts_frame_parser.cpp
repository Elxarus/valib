/*
  DTSFrameParser test

  1  frame_type
  5  samples_deficit
  1  crc_present
  7  sample_blocks
  14 frame_length
  6  amode
  4  sample_rate
  5  bit_rate

  1  downmix
  1  dynrange
  1  timestamp
  1  aux_data
  1  hdcd
  3  ext_descr
  1  ext_coding
  1  aspf
  2  lfe
  1  predictor_history
  ---
  1  frame_type
  5  samples_deficit
  1  crc_present
  1  sample_blocks

  6  sample_blocks
  2  frame_length

  8  frame_length

  4  frame_length
  4  amode

  2  amode
  4  sample_rate
  2  bit_rate

  3  bit_rate
  1  downmix
  1  dynrange
  1  timestamp
  1  aux_data
  1  hdcd

  3  ext_descr
  1  ext_coding
  1  aspf
  2  lfe
  1  predictor_history
*/

#include <boost/test/unit_test.hpp>
#include "parsers/dts/dts_header.h"

static const uint8_t good[][16] =
{
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x75, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },

  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD0, 0x05, 0xE0, 0x09, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD0, 0x49, 0xE0, 0x09, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD0, 0x8D, 0xE0, 0x09, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD0, 0xD9, 0xE0, 0x09, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD1, 0x1D, 0xE0, 0x0B, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD1, 0x61, 0xE0, 0x0B, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD1, 0xAD, 0xE0, 0x0B, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD1, 0xF1, 0xE0, 0x0B, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x35, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x79, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x7D, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
};

static const Speakers good_spk[] =
{
  Speakers(FORMAT_DTS, MODE_5_1, 48000),

  Speakers(FORMAT_DTS, MODE_MONO,   8000),
  Speakers(FORMAT_DTS, MODE_STEREO, 16000),
  Speakers(FORMAT_DTS, MODE_STEREO, 32000),
  Speakers(FORMAT_DTS, MODE_STEREO, 11025, -1, RELATION_SUMDIFF),
  Speakers(FORMAT_DTS, MODE_STEREO | CH_MASK_LFE, 22050, -1, RELATION_DOLBY),
  Speakers(FORMAT_DTS, MODE_3_0    | CH_MASK_LFE, 44100),
  Speakers(FORMAT_DTS, MODE_2_1    | CH_MASK_LFE, 12000),
  Speakers(FORMAT_DTS, MODE_3_1    | CH_MASK_LFE, 24000),
  Speakers(FORMAT_DTS, MODE_2_2    | CH_MASK_LFE, 48000),
  Speakers(FORMAT_DTS, MODE_3_2    | CH_MASK_LFE, 96000),
  Speakers(FORMAT_DTS, MODE_3_2    | CH_MASK_LFE, 192000),
};

static const uint8_t bad[][16] =
{
  // null header
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },

  // bad amode
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0xB5, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0xF5, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD3, 0x35, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD4, 0x35, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD8, 0x35, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xDF, 0xF5, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xDF, 0xF5, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },

  // bad sample_rate
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x41, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x51, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x55, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x65, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x69, 0xE0, 0x0D, 0x3B, 0x80, 0x09, 0x7B, 0xDE },

  // bad lfe
  { 0x7F, 0xFE, 0x80, 0x01, 0xFC, 0x3C, 0x3E, 0xD2, 0x75, 0xE0, 0x0F, 0x3B, 0x80, 0x09, 0x7B, 0xDE },
};

BOOST_AUTO_TEST_SUITE(dts_frame_parser)

BOOST_AUTO_TEST_CASE(can_parse)
{
  DTSFrameParser parser;
  BOOST_CHECK(parser.can_parse(FORMAT_DTS));
}

BOOST_AUTO_TEST_CASE(sync_info)
{
  SyncInfo sinfo = DTSFrameParser().sync_info();

  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK(sinfo.sync_trie.is_sync(good[i]));
}

BOOST_AUTO_TEST_CASE(parse_header)
{
  FrameInfo finfo;
  DTSFrameParser parser;

  for (int i = 0; i < array_size(good); i++)
  {
    BOOST_CHECK_MESSAGE(parser.parse_header(good[i], &finfo), i);
    BOOST_CHECK_MESSAGE(good_spk[i] == finfo.spk, i);
  }

  for (int i = 0; i < array_size(bad); i++)
    BOOST_CHECK_MESSAGE(!parser.parse_header(bad[i]), i);
}

BOOST_AUTO_TEST_CASE(compare_headers)
{
  DTSFrameParser parser;

  // Compare equal good headers
  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK_MESSAGE(parser.compare_headers(good[i], good[i]), i);

  // Compare different good headers
  for (int i = 0; i < array_size(good); i++)
    for (int j = i+1; j < array_size(good); j++)
    {
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[i], good[j]), i << ", " << j);
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[j], good[i]), i << ", " << j);
    }

  // Compare good with bad
  for (int i = 0; i < array_size(good); i++)
    for (int j = 0; j < array_size(bad); j++)
    {
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[i], bad[j]), i << ", " << j);
      BOOST_CHECK_MESSAGE(!parser.compare_headers(bad[j], good[i]), i << ", " << j);
    }

  // Compare bad headers
//  for (int i = 0; i < array_size(bad); i++)
//    for (int j = 0; j < array_size(bad); j++)
//      BOOST_CHECK_MESSAGE(!parser.compare_headers(bad[i], bad[j]), i << ", " << j);
}

BOOST_AUTO_TEST_SUITE_END()
