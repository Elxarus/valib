/*
  MLPFrameParser test
*/

#include <boost/test/unit_test.hpp>
#include "parsers/mlp/mlp_header.h"

static const uint8_t good[][12] =
{                                                                             // bits1 bits2 rate1 rate2 channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x00 }, //   0     f     0     f      0
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x00, 0x00, 0x00, 0x01 }, //   0     0     0     0      1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x1f, 0x1f, 0x00, 0x02 }, //   1     f     1     f      2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x10, 0x11, 0x00, 0x03 }, //   1     0     1     1      3
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x11, 0x2f, 0x00, 0x04 }, //   1     1     2     f      4
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x2f, 0x22, 0x00, 0x05 }, //   2     f     2     2      5
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x20, 0x8f, 0x00, 0x06 }, //   2     0     8     f      6
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x21, 0x88, 0x00, 0x07 }, //   2     1     8     8      7
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x22, 0x9f, 0x00, 0x08 }, //   2     2     9     f      8
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x99, 0x00, 0x09 }, //   0     f     9     9      9
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x00, 0xaf, 0x00, 0x0a }, //   0     0     a     f      a
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x1f, 0xaa, 0x00, 0x0b }, //   1     f     a     a      b
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x10, 0x0f, 0x00, 0x0c }, //   1     0     0     f      c
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x11, 0x00, 0x00, 0x0d }, //   1     1     0     0      d
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x2f, 0x1f, 0x00, 0x0e }, //   2     f     1     f      e
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x20, 0x11, 0x00, 0x0f }, //   2     0     1     1      f
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x21, 0x2f, 0x00, 0x10 }, //   2     1     2     f     10
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x22, 0x22, 0x00, 0x11 }, //   2     2     2     2     11
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x8f, 0x00, 0x12 }, //   0     f     8     f     12
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x00, 0x89, 0x00, 0x13 }, //   0     0     8     8     13
//  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x1f, 0x9f, 0x00, 0x14 }, //   1     f     9     f     14
};

static const Speakers good_spk[] =
{
  Speakers(FORMAT_MLP, MODE_1_0, 48000),

  Speakers(FORMAT_MLP, MODE_2_0, 48000),
  Speakers(FORMAT_MLP, MODE_2_1, 96000),
  Speakers(FORMAT_MLP, MODE_2_0_2, 96000),
  Speakers(FORMAT_MLP, MODE_2_0_LFE, 192000),
  Speakers(FORMAT_MLP, MODE_2_1_LFE, 192000),
  Speakers(FORMAT_MLP, MODE_2_0_2_LFE, 44100),

  Speakers(FORMAT_MLP, MODE_3_0, 44100),
  Speakers(FORMAT_MLP, MODE_3_1, 88200),
  Speakers(FORMAT_MLP, MODE_3_0_2, 88200),
  Speakers(FORMAT_MLP, MODE_3_0_LFE, 176400),
  Speakers(FORMAT_MLP, MODE_3_1_LFE, 176400),
  Speakers(FORMAT_MLP, MODE_3_0_2_LFE, 48000),

//  Speakers(FORMAT_MLP, MODE_3_1, 48000),
//  Speakers(FORMAT_MLP, MODE_3_0_2, 96000),
//  Speakers(FORMAT_MLP, MODE_3_0_LFE, 96000),
//  Speakers(FORMAT_MLP, MODE_3_1_LFE, 192000),

//  Speakers(FORMAT_MLP, MODE_3_0_2_LFE, 192000),
//  Speakers(FORMAT_MLP, MODE_2_0_2_LFE, 44100),

//  Speakers(FORMAT_MLP, MODE_3_0_2, 44100),
//  Speakers(FORMAT_MLP, MODE_3_0_2_LFE, 88200),
};

static const uint8_t bad[][12] =
{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // null header

  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x3f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x4f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x5f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x6f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x7f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x8f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x9f, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xaf, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xbf, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xcf, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xdf, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xef, 0x0f, 0x00, 0x00 }, // bad bits1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0xff, 0x0f, 0x00, 0x00 }, // bad bits1

  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x03, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x04, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x05, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x06, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x07, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x08, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x09, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0a, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0b, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0c, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0d, 0x0f, 0x00, 0x00 }, // bad bits2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0e, 0x0f, 0x00, 0x00 }, // bad bits2

  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x3f, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x4f, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x5f, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x6f, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x7f, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0xbf, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0xcf, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0xdf, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0xef, 0x00, 0x00 }, // bad rate1
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0xff, 0x00, 0x00 }, // bad rate1

  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x03, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x04, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x05, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x06, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x07, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0b, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0c, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0d, 0x00, 0x00 }, // bad rate2
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0e, 0x00, 0x00 }, // bad rate2

  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x15 }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x16 }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x17 }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x18 }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x19 }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1a }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1b }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1c }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1d }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1e }, // bad channels
  { 0x00, 0x00, 0x00, 0x00, 0xf8, 0x72, 0x6f, 0xbb, 0x0f, 0x0f, 0x00, 0x1f }, // bad channels
};

BOOST_AUTO_TEST_SUITE(mlp_frame_parser)

BOOST_AUTO_TEST_CASE(can_parse)
{
  MlpFrameParser parser;
  BOOST_CHECK(parser.can_parse(FORMAT_MLP));
}

BOOST_AUTO_TEST_CASE(sync_info)
{
  SyncInfo sinfo = MlpFrameParser().sync_info();

  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK(sinfo.sync_trie.is_sync(good[i]));

//  for (int i = 0; i < array_size(bad); i++)
//    BOOST_CHECK(!sinfo.sync_trie.is_sync(bad[i]));
}

BOOST_AUTO_TEST_CASE(parse_header)
{
  FrameInfo finfo;
  MlpFrameParser parser;

  for (int i = 0; i < array_size(good); i++)
  {
    BOOST_CHECK_MESSAGE(parser.parse_header(good[i], &finfo), "good header N" << i);
    BOOST_CHECK_MESSAGE(good_spk[i] == finfo.spk, "good header N" << i);
  }

  for (int i = 0; i < array_size(bad); i++)
    BOOST_CHECK_MESSAGE(!parser.parse_header(bad[i]), "bad header N" << i);
}

BOOST_AUTO_TEST_CASE(compare_headers)
{
  MlpFrameParser parser;

  // Compare equal good headers
  for (int i = 0; i < array_size(good); i++)
    BOOST_CHECK_MESSAGE(parser.compare_headers(good[i], good[i]), "i = " << i);

  // Compare different good headers
  for (int i = 0; i < array_size(good); i++)
    for (int j = i+1; j < array_size(good); j++)
    {
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[i], good[j]), "i = " << i << " j = " << j);
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[j], good[i]), "i = " << i << " j = " << j);
    }

  // Compare good with bad
  for (int i = 0; i < array_size(good); i++)
    for (int j = 0; j < array_size(bad); j++)
    {
      BOOST_CHECK_MESSAGE(!parser.compare_headers(good[i], bad[j]), "i = " << i << " j = " << j);
      BOOST_CHECK_MESSAGE(!parser.compare_headers(bad[j], good[i]), "i = " << i << " j = " << j);
    }

  // Compare bad headers
  for (int i = 0; i < array_size(bad); i++)
    for (int j = 0; j < array_size(bad); j++)
      BOOST_CHECK_MESSAGE(!parser.compare_headers(bad[i], bad[j]), "i = " << i << " j = " << j);
}

BOOST_AUTO_TEST_SUITE_END()
